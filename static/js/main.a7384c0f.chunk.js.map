{"version":3,"sources":["components/Todo.js","components/TodoList.js","components/TodoForm.js","App.js","serviceWorker.js","index.js"],"names":["Todo","todo","removetodo","toggleComplete","style","display","Typography","marginLeft","color","textDecoration","completed","task","Button","id","onClick","Checkbox","TodoList","addTodo","map","key","TodoForm","useState","setTodo","setAddTodo","className","onSubmit","e","preventDefault","type","placeholder","value","onChange","Date","now","target","console","log","filter","App","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0RAoCeA,MAhCf,YAAkD,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,WAAYC,EAAgB,EAAhBA,eAW7B,OACI,yBAAKC,MAAO,CAACC,QAAQ,SACnB,kBAACC,EAAA,EAAD,CACCF,MAAO,CACHG,WAAY,OACXC,MAAO,cACRC,eAAeR,EAAKS,UAAY,eAAgB,OAGtDT,EAAKU,KAEL,kBAACC,EAAA,EAAD,CACAR,MAAO,CAACG,WAAW,SACnBM,GAAIZ,EAAKY,GACRC,QAvBa,WACfZ,EAAWD,EAAKY,MAmBf,UAIA,kBAACE,EAAA,EAAD,CAAWD,QAnBjB,WACIX,EAAeF,EAAKY,UCTZ,SAASG,EAAT,GAAwD,IAArCC,EAAoC,EAApCA,QAAQf,EAA4B,EAA5BA,WAAWC,EAAiB,EAAjBA,eACjD,OAEK,6BACGc,EAAQC,KAAI,SAACjB,GAAD,OACX,kBAAC,EAAD,CACGkB,IAAOlB,EAAKY,GACZZ,KAAOA,EACPC,WAAaA,EACbC,eAAgBA,OANvB,KC8DMiB,MAhEf,WAAoB,IAAD,EACQC,mBAAS,CAC5BR,GAAG,EACHF,KAAK,GACLD,WAAW,IAJA,mBACRT,EADQ,KACHqB,EADG,OAMeD,mBAAS,IANxB,mBAMRJ,EANQ,KAMCM,EAND,KAgDf,OACA,yBAAKC,UAAU,OACX,0BAAMX,GAAI,YAAYY,SAlCH,SAACC,GACpBA,EAAEC,iBACC1B,EAAKU,MACRY,EAAW,CACPtB,GADM,mBAEHgB,KAKPK,EAAS,CACLX,KAAM,OAwBV,2BAAOiB,KAAO,OAAOC,YAAa,WAAWC,MAAQ7B,EAAKU,KAAMoB,SA3CpE,SAAwBL,GACpBJ,EAAQ,CAEJT,GAAImB,KAAKC,MACTtB,KAAMe,EAAEQ,OAAOJ,WAwCnB,4BAAQF,KAAK,UAAb,QAEA,kBAACZ,EAAD,CACAC,QAASA,EACTf,WA1Be,SAACW,GACfsB,QAAQC,IAAIvB,GACbU,EAAWN,EAAQoB,QAAQ,SAAApC,GAAI,OAAIA,EAAKY,IAAMA,OAyB9CV,eAvBJ,SAAwBU,GACpBU,EACEN,EAAQC,KAAI,SAAAjB,GACV,OAAIA,EAAKY,IAAMA,EACN,2BACFZ,GADL,IAEES,WAAYT,EAAKS,YAGdT,WC/BJqC,MAVf,WACE,OACC,6BACE,wBAAIlC,MAAO,CAAEmC,UAAW,WAAxB,oBACA,kBAAC,EAAD,QCEeC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,c","file":"static/js/main.a7384c0f.chunk.js","sourcesContent":["import { Button, Checkbox, List, Typography } from '@material-ui/core';\nimport React from 'react';\nimport '../App.css'\n\nfunction Todo({todo, removetodo, toggleComplete}){\n\n    const deleteItem = () => {\n        removetodo(todo.id);\n        //{console.log(id)}\n        \n   }\n   function toggle(){\n       toggleComplete(todo.id)\n   }\n\n    return(\n        <div style={{display:'flex'  }}>\n          <Typography  \n           style={{\n               marginLeft: \"50px\",\n                color: \"yellowgreen\" ,\n               textDecoration:todo.completed ? \"line-through\": null \n           }}\n           >\n        {todo.task} \n          \n         <Button \n         style={{marginLeft:\"100px\"}}\n         id={todo.id}\n          onClick={deleteItem}>delete</Button>\n         <Checkbox  onClick={toggle}></Checkbox>\n         </Typography> \n        </div>\n    )\n}\n\nexport default Todo;","import React from 'react'\nimport Todo from './Todo';\n\nexport default function TodoList({addTodo,removetodo,toggleComplete}) {\n    return (\n        //  console.log(addTodo)\n         <div >\n           {addTodo.map((todo) => (\n             <Todo\n                key = {todo.id}\n                todo= {todo}\n                removetodo ={removetodo}\n                toggleComplete={toggleComplete}\n             \n             />\n              \n           ))}; \n        </div>\n        \n        );\n    \n    \n}\n","import { TextField } from '@material-ui/core'\nimport React, {useState} from 'react'\nimport '../../src/App.css';\nimport TodoList from './TodoList'\nfunction TodoForm(){\n    const [todo,setTodo] = useState({\n        id:0,\n        task:'',\n        completed: false \n    });\n    const [addTodo, setAddTodo] = useState([]);\n    \n    function handleOnChange(e){\n        setTodo({\n            //...todo,\n            id: Date.now(),\n            task: e.target.value \n        });\n    };\n    \n    const handleOnSubmit = (e)=>{\n        e.preventDefault();\n        if(todo.task){\n        setAddTodo([\n            todo,\n            ...addTodo\n            \n\n        ]);\n        }\n        setTodo( {\n            task :'' \n        })\n    }\n    const removetodo = (id)=>{\n        {console.log(id)}\n        setAddTodo(addTodo.filter( todo => todo.id != id  ) )\n    }\n    function toggleComplete(id) {\n        setAddTodo(\n          addTodo.map(todo => {\n            if (todo.id == id) {\n              return {\n                ...todo,\n                completed: !todo.completed\n              };\n            }\n            return todo;\n          })\n        );\n      }\n    \n    return(\n    <div className=\"app\">\n        <form id= 'To-do-app' onSubmit= {handleOnSubmit} >\n        <input type = 'text' placeholder= 'add item' value= {todo.task} onChange={handleOnChange}></input>  \n        <button type='submit'>Add</button>\n        </form>\n        <TodoList \n        addTodo={addTodo}\n        removetodo={removetodo}\n        toggleComplete={toggleComplete}\n        />\n       \n\n    </div>\n    )\n}\nexport default TodoForm;\n\n","import { CenterFocusStrong } from '@material-ui/icons';\nimport React from 'react';\n\nimport TodoForm from './components/TodoForm';\n//import { FormHelperText } from '@material-ui/core';\n\nfunction App() {\n  return (\n   <div>\n     <h1 style={{ textAlign: 'center' }}> React todo list</h1>\n     <TodoForm />\n\n   </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}